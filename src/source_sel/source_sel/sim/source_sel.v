// source_sel.v

// Generated using ACDS version 21.1 169

`timescale 1 ps / 1 ps
module source_sel (
		input  wire        clk,                //       clk.clk
		input  wire        reset,              // clk_reset.reset
		input  wire [0:0]  src_in_credit,      //       src.credit
		input  wire        src_in_update,      //          .update
		output wire        src_out_ret_credit, //          .returnCredit
		output wire [1:0]  src_out_channel,    //          .channel
		output wire [63:0] src_out_data,       //          .data
		output wire        src_out_valid,      //          .valid
		input  wire        sink0_valid,        //     sink0.valid
		input  wire [63:0] sink0_data,         //          .data
		output wire [0:0]  sink0_credit,       //          .credit
		output wire        sink0_update,       //          .update
		input  wire        sink0_ret_credit,   //          .returnCredit
		input  wire        sink1_valid,        //     sink1.valid
		input  wire [63:0] sink1_data,         //          .data
		output wire [0:0]  sink1_credit,       //          .credit
		output wire        sink1_update,       //          .update
		input  wire        sink1_ret_credit,   //          .returnCredit
		input  wire        sink2_valid,        //     sink2.valid
		input  wire [63:0] sink2_data,         //          .data
		output wire [0:0]  sink2_credit,       //          .credit
		output wire        sink2_update,       //          .update
		input  wire        sink2_ret_credit,   //          .returnCredit
		input  wire        sink3_valid,        //     sink3.valid
		input  wire [63:0] sink3_data,         //          .data
		output wire [0:0]  sink3_credit,       //          .credit
		output wire        sink3_update,       //          .update
		input  wire        sink3_ret_credit    //          .returnCredit
	);

	source_sel_avst_credit_multiplexer_110_xsulssa #(
		.USE_ENCODING             (0),
		.USE_INIT_HS              (0),
		.USE_PACKETS              (0),
		.USE_EMPTY                (0),
		.USE_ERROR                (0),
		.SRC_MAX_CREDIT           (1),
		.SRC_CRD_W                (1),
		.SRC_SYMBOLS_PER_BEAT     (4),
		.SRC_DATA_BITS_PER_SYMBOL (16),
		.SRC_DATA_W               (64),
		.SRC_CHANNEL_W            (2),
		.SRC_ERROR_W              (1),
		.SRC_EMPTY_W              (2),
		.SINK_USE_CHANNEL         (0),
		.SINK_CHANNEL_W           (2)
	) avst_credit_multiplexer_0 (
		.clk                (clk),                //   input,   width = 1,       clk.clk
		.reset              (reset),              //   input,   width = 1, clk_reset.reset
		.src_in_credit      (src_in_credit),      //   input,   width = 1,       src.credit
		.src_in_update      (src_in_update),      //   input,   width = 1,          .update
		.src_out_ret_credit (src_out_ret_credit), //  output,   width = 1,          .returnCredit
		.src_out_channel    (src_out_channel),    //  output,   width = 2,          .channel
		.src_out_data       (src_out_data),       //  output,  width = 64,          .data
		.src_out_valid      (src_out_valid),      //  output,   width = 1,          .valid
		.sink0_valid        (sink0_valid),        //   input,   width = 1,     sink0.valid
		.sink0_data         (sink0_data),         //   input,  width = 64,          .data
		.sink0_credit       (sink0_credit),       //  output,   width = 1,          .credit
		.sink0_update       (sink0_update),       //  output,   width = 1,          .update
		.sink0_ret_credit   (sink0_ret_credit),   //   input,   width = 1,          .returnCredit
		.sink1_valid        (sink1_valid),        //   input,   width = 1,     sink1.valid
		.sink1_data         (sink1_data),         //   input,  width = 64,          .data
		.sink1_credit       (sink1_credit),       //  output,   width = 1,          .credit
		.sink1_update       (sink1_update),       //  output,   width = 1,          .update
		.sink1_ret_credit   (sink1_ret_credit),   //   input,   width = 1,          .returnCredit
		.sink2_valid        (sink2_valid),        //   input,   width = 1,     sink2.valid
		.sink2_data         (sink2_data),         //   input,  width = 64,          .data
		.sink2_credit       (sink2_credit),       //  output,   width = 1,          .credit
		.sink2_update       (sink2_update),       //  output,   width = 1,          .update
		.sink2_ret_credit   (sink2_ret_credit),   //   input,   width = 1,          .returnCredit
		.sink3_valid        (sink3_valid),        //   input,   width = 1,     sink3.valid
		.sink3_data         (sink3_data),         //   input,  width = 64,          .data
		.sink3_credit       (sink3_credit),       //  output,   width = 1,          .credit
		.sink3_update       (sink3_update),       //  output,   width = 1,          .update
		.sink3_ret_credit   (sink3_ret_credit),   //   input,   width = 1,          .returnCredit
		.src_in_init        (1'b0),               // (terminated),                        
		.src_out_init_ack   (),                   // (terminated),                        
		.src_out_error      (),                   // (terminated),                        
		.src_out_sop        (),                   // (terminated),                        
		.src_out_eop        (),                   // (terminated),                        
		.src_out_empty      ()                    // (terminated),                        
	);

endmodule
